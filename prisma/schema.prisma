datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int              @id @default(autoincrement())
  role           String
  user_id        String           @unique @default(uuid())
  google_id      String?          @unique
  username       String           @unique
  email          String?          @unique
  password       String?
  name           String?          // Add the missing `name` field

  accounts       Account[]
  profile        UserProfile?
  comments       Comment[]
  posts          Post[]
  upvotes        Upvote[]
  downvotes      Downvote[]
  notifications  Notification[]   @relation("UserNotifications")
  actions        Notification[]   @relation("ActionUserNotifications")
}

model Otp {
  id           Int       @id @default(autoincrement())
  email        String
  otp          String
  createdAt    DateTime  @default(now())
  expiresAt    DateTime

  @@index([email]) // Optimize lookups by email
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  provider           String
  providerAccountId  String
  refresh_token      String?   @map("refreshToken")
  access_token       String?   @map("accessToken")
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model UserProfile {
  id           Int     @id @default(autoincrement())
  userId       Int     @unique
  name         String? // Added support for Google user profiles
  profile_img  String?
  header_img   String?
  posts        Int     @default(0)
  followers    Int     @default(0)
  following    Int     @default(0)
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Post {
  id          Int       @id @default(autoincrement())
  user_id     Int
  category_id String
  image_url   String
  description String
  created_at  DateTime  @default(now())
  counter     Int       @default(0)
  archived    Boolean   @default(false)
  comments    Comment[]
  upvotes     Upvote[]
  downvotes   Downvote[]
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Comment {
  id           Int      @id @default(autoincrement())
  post_id      Int
  user_id      Int
  comment_text String
  created_at   DateTime @default(now())
  edited       Boolean  @default(false)

  user         User     @relation(fields: [user_id], references: [id])
  post         Post     @relation(fields: [post_id], references: [id])
}

model Upvote {
  id        Int      @id @default(autoincrement())
  post_id   Int
  user_id   Int

  post      Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([post_id, user_id])
}

model Downvote {
  id        Int      @id @default(autoincrement())
  post_id   Int
  user_id   Int

  post      Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([post_id, user_id])
}

model Notification {
  id           Int      @id @default(autoincrement())
  userId       Int
  actionUserId Int
  type         String
  message      String
  createdAt    DateTime  @default(now())

  user         User      @relation("UserNotifications", fields: [userId], references: [id])
  actionUser   User      @relation("ActionUserNotifications", fields: [actionUserId], references: [id])

  @@index([userId])
}
