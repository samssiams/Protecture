datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int              @id @default(autoincrement())
  role           String
  user_id        String           @unique @default(uuid())
  google_id      String?          @unique
  username       String           @unique
  email          String?          @unique
  password       String?
  name           String?          
  suspendedUntil DateTime?        

  accounts       Account[]
  profile        UserProfile?
  comments       Comment[]
  posts          Post[]
  upvotes        Upvote[]
  downvotes      Downvote[]
  notifications  Notification[]   @relation("UserNotifications")
  actions        Notification[]   @relation("ActionUserNotifications")
  reports        Report[]         @relation("ReportedUsers")
  ownedCommunities  Community[]   @relation("OwnedCommunities")
  communityMemberships CommunityMember[]
  appeals        AppealRequest[]  @relation("UserAppeals")
}

model AppealRequest {
  id        Int      @id @default(autoincrement())
  userId    Int      
  msg       String
  status    String   @default("pending") // Status: pending, accepted, rejected
  createdAt DateTime @default(now())

  user      User     @relation("UserAppeals", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Otp {
  id        Int      @id @default(autoincrement())
  email     String
  otp       String
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([email]) 
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  provider           String
  providerAccountId  String
  refresh_token      String?   @map("refreshToken")
  access_token       String?   @map("accessToken")
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model UserProfile {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  name        String?
  profile_img String?
  header_img  String?
  posts       Int     @default(0)
  followers   Int     @default(0)
  following   Int     @default(0)
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Post {
  id          Int       @id @default(autoincrement())
  user_id     Int
  category_id String
  image_url   String
  description String
  created_at  DateTime  @default(now())
  counter     Int       @default(0)
  archived    Boolean   @default(false)
  status      String?
  comments    Comment[]
  upvotes     Upvote[]
  downvotes   Downvote[]
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  reports     Report[]  @relation("ReportedPosts")

  communityPosts CommunityPost[]
}

model Comment {
  id           Int      @id @default(autoincrement())
  post_id      Int
  user_id      Int
  comment_text String
  created_at   DateTime @default(now())
  edited       Boolean  @default(false)

  user         User     @relation(fields: [user_id], references: [id])
  post         Post     @relation(fields: [post_id], references: [id])
}

model Upvote {
  id        Int      @id @default(autoincrement())
  post_id   Int
  user_id   Int

  post      Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([post_id, user_id])
}

model Downvote {
  id        Int      @id @default(autoincrement())
  post_id   Int
  user_id   Int

  post      Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([post_id, user_id])
}

model Notification {
  id           Int      @id @default(autoincrement())
  userId       Int
  actionUserId Int?
  type         String
  message      String
  isRead       Boolean   @default(false)
  createdAt    DateTime  @default(now())

  user         User      @relation("UserNotifications", fields: [userId], references: [id])
  actionUser   User?     @relation("ActionUserNotifications", fields: [actionUserId], references: [id])

  @@index([userId])
}

model Report {
  id          Int      @id @default(autoincrement())
  postId      Int
  reportedBy  Int
  reason      String
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())

  post        Post     @relation("ReportedPosts", fields: [postId], references: [id], onDelete: Cascade)
  reporter    User     @relation("ReportedUsers", fields: [reportedBy], references: [id], onDelete: Cascade)

  @@index([postId])
}

model Community {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  description    String
  ownerId        Int
  status         String           @default("PENDING")

  owner          User             @relation("OwnedCommunities", fields: [ownerId], references: [id])
  members        CommunityMember[]
  communityPosts  CommunityPost[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([name])
}

model CommunityMember {
  id          Int        @id @default(autoincrement())
  communityId Int
  userId      Int

  community   Community  @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([communityId, userId])
  @@index([communityId])
  @@index([userId])
}

model CommunityPost {
  id           Int        @id @default(autoincrement())
  postId       Int
  communityId  Int

  post         Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  community    Community  @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@unique([postId, communityId])
  @@index([communityId])
  @@index([postId])
}
