datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int              @id @default(autoincrement()) // Primary key as Int
  role           String
  user_id        String           @unique // User ID is still String
  google_id      String?          @unique // Change from Int? to String?
  username       String           @unique
  email          String?          @unique
  password       String?
  otp            String?          // Field for OTP

  accounts       Account[] 
  profile        UserProfile?
  comments       Comment[]        // User can have many comments
  posts          Post[]           // User can create many posts
  upvotes        Upvote[]         // User can upvote many posts
  downvotes      Downvote[]       // User can downvote many posts
  notifications  Notification[]   @relation("UserNotifications") // Notifications for the user
  actions        Notification[]   @relation("ActionUserNotifications") // Actions performed by the user
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  provider           String
  providerAccountId  String    // Typically the Google ID or other provider's unique ID
  refresh_token      String?   @map("refreshToken")
  access_token       String?   @map("accessToken")
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model UserProfile {
  id           Int     @id @default(autoincrement())
  userId       Int     @unique // Foreign key referencing User table
  name         String?
  profile_img  String? // URL or path for profile picture
  header_img   String? // URL or path for header image (cover photo)
  posts        Int     @default(0)
  followers    Int     @default(0)
  following    Int     @default(0)
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Post {
  id          Int       @id @default(autoincrement())
  user_id     Int
  category_id String
  image_url   String
  description String
  created_at  DateTime  @default(now())
  counter     Int       @default(0)
  archived    Boolean   @default(false) // New field for archiving posts
  comments    Comment[]
  upvotes     Upvote[]
  downvotes   Downvote[]
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Comment {
  id          Int      @id @default(autoincrement()) // Ensure id is auto-incremented
  post_id     Int
  user_id     Int
  comment_text String
  created_at  DateTime @default(now())
  edited      Boolean  @default(false) // Field to track if the comment was edited

  // Relations
  user  User  @relation(fields: [user_id], references: [id])
  post  Post  @relation(fields: [post_id], references: [id])
}

model Upvote {
  id        Int      @id @default(autoincrement())
  post_id   Int
  user_id   Int

  post      Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([post_id, user_id]) // Composite key
}

model Downvote {
  id        Int      @id @default(autoincrement())
  post_id   Int
  user_id   Int

  post      Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([post_id, user_id]) // Composite key
}

model Notification {
  id           Int      @id @default(autoincrement())
  userId       Int
  actionUserId Int       // The user who performed the action
  type         String    // e.g., 'PROFILE_UPDATE', 'UPVOTE', 'DOWNVOTE'
  message      String
  createdAt    DateTime  @default(now())

  user         User      @relation("UserNotifications", fields: [userId], references: [id])
  actionUser   User      @relation("ActionUserNotifications", fields: [actionUserId], references: [id])

  @@index([userId])
}
